{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91799\\\\Desktop\\\\bomb-dashboard-final-task\\\\src\\\\views\\\\Dashboard\\\\components\\\\Stake.tsx\";\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport useApprove from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdrawCheck from '../../../hooks/boardroom/useWithdrawCheck';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport useBombFinance from '../../../hooks/useBombFinance';\nimport useStakedBalanceOnBoardroom from '../../../hooks/useStakedBalanceOnBoardroom';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useUnstakeTimerBoardroom from '../../../hooks/boardroom/useUnstakeTimerBoardroom';\nimport useStakeToBoardroom from '../../../hooks/useStakeToBoardroom';\nimport useWithdrawFromBoardroom from '../../../hooks/useWithdrawFromBoardroom';\n\nconst Stake = () => {\n  const bombFinance = useBombFinance();\n  const [approveStatus, approve] = useApprove(bombFinance.BSHARE, bombFinance.contracts.Boardroom.address);\n  const tokenBalance = useTokenBalance(bombFinance.BSHARE);\n  const stakedBalance = useStakedBalanceOnBoardroom();\n  const {\n    from,\n    to\n  } = useUnstakeTimerBoardroom();\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('BSHARE', bombFinance.BSHARE);\n  const tokenPriceInDollars = useMemo(() => stakedTokenPriceInDollars ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString() : null, [stakedTokenPriceInDollars, stakedBalance]); // const isOldBoardroomMember = boardroomVersion !== 'latest';\n\n  const {\n    onStake\n  } = useStakeToBoardroom();\n  const {\n    onWithdraw\n  } = useWithdrawFromBoardroom();\n  const canWithdrawFromBoardroom = useWithdrawCheck();\n  const [onPresentDeposit, onDismissDeposit] = useModal( /*#__PURE__*/React.createElement(DepositModal, {\n    max: tokenBalance,\n    onConfirm: value => {\n      onStake(value);\n      onDismissDeposit();\n    },\n    tokenName: 'BShare',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }));\n  const [onPresentWithdraw, onDismissWithdraw] = useModal( /*#__PURE__*/React.createElement(WithdrawModal, {\n    max: stakedBalance,\n    onConfirm: value => {\n      onWithdraw(value);\n      onDismissWithdraw();\n    },\n    tokenName: 'BShare',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Value, {\n    value: getDisplayBalance(stakedBalance),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    text: `â‰ˆ $${tokenPriceInDollars}`,\n    variant: \"yellow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\nconst StyledActionSpacer = styled.div`\n  height: ${props => props.theme.spacing[4]}px;\n  width: ${props => props.theme.spacing[4]}px;\n`;\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nexport default Stake;","map":{"version":3,"sources":["C:/Users/91799/Desktop/bomb-dashboard-final-task/src/views/Dashboard/components/Stake.tsx"],"names":["React","useMemo","styled","Label","Value","useApprove","useModal","useTokenBalance","useWithdrawCheck","getDisplayBalance","DepositModal","WithdrawModal","useBombFinance","useStakedBalanceOnBoardroom","useStakedTokenPriceInDollars","useUnstakeTimerBoardroom","useStakeToBoardroom","useWithdrawFromBoardroom","Stake","bombFinance","approveStatus","approve","BSHARE","contracts","Boardroom","address","tokenBalance","stakedBalance","from","to","stakedTokenPriceInDollars","tokenPriceInDollars","Number","toFixed","toString","onStake","onWithdraw","canWithdrawFromBoardroom","onPresentDeposit","onDismissDeposit","value","onPresentWithdraw","onDismissWithdraw","StyledCardHeader","div","StyledCardActions","StyledActionSpacer","props","theme","spacing","StyledCardContentInner"],"mappings":"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","sourcesContent":["import React, {useMemo} from 'react';\nimport styled from 'styled-components';\n\nimport {Box, Button, Card, CardContent, Typography} from '@material-ui/core';\n\n// import Button from '../../../components/Button';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport {AddIcon, RemoveIcon} from '../../../components/icons';\nimport IconButton from '../../../components/IconButton';\nimport Label from '../../../components/Label';\nimport Value from '../../../components/Value';\n\nimport useApprove, {ApprovalState} from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdrawCheck from '../../../hooks/boardroom/useWithdrawCheck';\n\nimport {getDisplayBalance} from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport useBombFinance from '../../../hooks/useBombFinance';\nimport ProgressCountdown from './ProgressCountdown';\nimport useStakedBalanceOnBoardroom from '../../../hooks/useStakedBalanceOnBoardroom';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useUnstakeTimerBoardroom from '../../../hooks/boardroom/useUnstakeTimerBoardroom';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport useStakeToBoardroom from '../../../hooks/useStakeToBoardroom';\nimport useWithdrawFromBoardroom from '../../../hooks/useWithdrawFromBoardroom';\n\nconst Stake: React.FC = () => {\n  const bombFinance = useBombFinance();\n  const [approveStatus, approve] = useApprove(bombFinance.BSHARE, bombFinance.contracts.Boardroom.address);\n  const tokenBalance = useTokenBalance(bombFinance.BSHARE);\n  const stakedBalance = useStakedBalanceOnBoardroom();\n  const {from, to} = useUnstakeTimerBoardroom();\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars('BSHARE', bombFinance.BSHARE);\n  const tokenPriceInDollars = useMemo(\n    () =>\n      stakedTokenPriceInDollars\n        ? (Number(stakedTokenPriceInDollars) * Number(getDisplayBalance(stakedBalance))).toFixed(2).toString()\n        : null,\n    [stakedTokenPriceInDollars, stakedBalance],\n  );\n  // const isOldBoardroomMember = boardroomVersion !== 'latest';\n\n  const {onStake} = useStakeToBoardroom();\n  const {onWithdraw} = useWithdrawFromBoardroom();\n  const canWithdrawFromBoardroom = useWithdrawCheck();\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      onConfirm={(value) => {\n        onStake(value);\n        onDismissDeposit();\n      }}\n      tokenName={'BShare'}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      onConfirm={(value) => {\n        onWithdraw(value);\n        onDismissWithdraw();\n      }}\n      tokenName={'BShare'}\n    />,\n  );\n\n  return (\n    <>\n      <Value value={getDisplayBalance(stakedBalance)} />\n      \n      <Label text={`â‰ˆ $${tokenPriceInDollars}`} variant=\"yellow\" />\n    </>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Stake;\n"]},"metadata":{},"sourceType":"module"}
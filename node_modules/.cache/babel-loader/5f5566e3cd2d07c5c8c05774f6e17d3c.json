{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91799\\\\Desktop\\\\bomb-dashboard-final-task\\\\src\\\\views\\\\Dashboard\\\\componentsBank\\\\Stake.tsx\";\nimport React, { useMemo, useContext } from 'react';\nimport styled from 'styled-components'; // import Button from '../../../components/Button';\n\nimport { Typography } from '@material-ui/core'; // import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\n\n//import Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport { ThemeContext } from 'styled-components';\nimport useApprove from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useStake from '../../../hooks/useStake';\nimport useZap from '../../../hooks/useZap';\nimport useStakedBalance from '../../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdraw from '../../../hooks/useWithdraw';\nimport { getDisplayBalance } from '../../../utils/formatBalance';\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport ZapModal from './ZapModal';\n\nconst Stake = _ref => {\n  let {\n    bank\n  } = _ref;\n  console.log({\n    bank\n  });\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\n  const {\n    color: themeColor\n  } = useContext(ThemeContext);\n  const tokenBalance = useTokenBalance(bank.depositToken);\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const tokenPriceInDollars = useMemo(() => stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null, [stakedTokenPriceInDollars]);\n  const earnedInDollars = (Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))).toFixed(2);\n  const {\n    onStake\n  } = useStake(bank);\n  const {\n    onZap\n  } = useZap(bank);\n  const {\n    onWithdraw\n  } = useWithdraw(bank);\n  const [onPresentDeposit, onDismissDeposit] = useModal( /*#__PURE__*/React.createElement(DepositModal, {\n    max: tokenBalance,\n    decimals: bank.depositToken.decimal,\n    onConfirm: amount => {\n      if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n      onStake(amount);\n      onDismissDeposit();\n    },\n    tokenName: bank.depositTokenName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }));\n  const [onPresentZap, onDissmissZap] = useModal( /*#__PURE__*/React.createElement(ZapModal, {\n    decimals: bank.depositToken.decimal,\n    onConfirm: (zappingToken, tokenName, amount) => {\n      if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n      onZap(zappingToken, tokenName, amount);\n      onDissmissZap();\n    },\n    tokenName: bank.depositTokenName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }));\n  const [onPresentWithdraw, onDismissWithdraw] = useModal( /*#__PURE__*/React.createElement(WithdrawModal, {\n    max: stakedBalance,\n    decimals: bank.depositToken.decimal,\n    onConfirm: amount => {\n      if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n      onWithdraw(amount);\n      onDismissWithdraw();\n    },\n    tokenName: bank.depositTokenName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Value, {\n    value: getDisplayBalance(stakedBalance, bank.depositToken.decimal),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      textTransform: 'uppercase',\n      color: '#fffff'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, `â‰ˆ $${earnedInDollars}`), /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      textTransform: 'uppercase',\n      color: '#f9d749'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, `${bank.depositTokenName} Staked`));\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\nconst StyledActionSpacer = styled.div`\n  height: ${props => props.theme.spacing[4]}px;\n  width: ${props => props.theme.spacing[4]}px;\n`;\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\nexport default Stake;","map":{"version":3,"sources":["C:/Users/91799/Desktop/bomb-dashboard-final-task/src/views/Dashboard/componentsBank/Stake.tsx"],"names":["React","useMemo","useContext","styled","Typography","Value","ThemeContext","useApprove","useModal","useStake","useZap","useStakedBalance","useStakedTokenPriceInDollars","useTokenBalance","useWithdraw","getDisplayBalance","DepositModal","WithdrawModal","ZapModal","Stake","bank","console","log","approveStatus","approve","depositToken","address","color","themeColor","tokenBalance","stakedBalance","contract","poolId","stakedTokenPriceInDollars","depositTokenName","tokenPriceInDollars","earnedInDollars","Number","decimal","toFixed","onStake","onZap","onWithdraw","onPresentDeposit","onDismissDeposit","amount","isNaN","onPresentZap","onDissmissZap","zappingToken","tokenName","onPresentWithdraw","onDismissWithdraw","textTransform","StyledCardHeader","div","StyledCardActions","StyledActionSpacer","props","theme","spacing","StyledCardContentInner"],"mappings":"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","sourcesContent":["import React, {useMemo, useContext} from 'react';\nimport styled from 'styled-components';\n\n// import Button from '../../../components/Button';\nimport {Button, Card, CardContent, Typography} from '@material-ui/core';\n// import Card from '../../../components/Card';\n// import CardContent from '../../../components/CardContent';\nimport CardIcon from '../../../components/CardIcon';\nimport {AddIcon, RemoveIcon} from '../../../components/icons';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport IconButton from '../../../components/IconButton';\n//import Label from '../../../components/Label';\nimport Value from '../../../components/Value';\nimport {ThemeContext} from 'styled-components';\n\nimport useApprove, {ApprovalState} from '../../../hooks/useApprove';\nimport useModal from '../../../hooks/useModal';\nimport useStake from '../../../hooks/useStake';\nimport useZap from '../../../hooks/useZap';\nimport useStakedBalance from '../../../hooks/useStakedBalance';\nimport useStakedTokenPriceInDollars from '../../../hooks/useStakedTokenPriceInDollars';\nimport useTokenBalance from '../../../hooks/useTokenBalance';\nimport useWithdraw from '../../../hooks/useWithdraw';\n\nimport {getDisplayBalance} from '../../../utils/formatBalance';\n\nimport DepositModal from './DepositModal';\nimport WithdrawModal from './WithdrawModal';\nimport ZapModal from './ZapModal';\nimport TokenSymbol from '../../../components/TokenSymbol';\nimport {Bank} from '../../../bomb-finance';\n\ninterface StakeProps {\n  bank: Bank;\n}\n\nconst Stake: React.FC<StakeProps> = ({ bank }) => {\n  console.log({bank})\n  const [approveStatus, approve] = useApprove(bank.depositToken, bank.address);\n\n  const {color: themeColor} = useContext(ThemeContext);\n  const tokenBalance = useTokenBalance(bank.depositToken);\n  const stakedBalance = useStakedBalance(bank.contract, bank.poolId);\n  const stakedTokenPriceInDollars = useStakedTokenPriceInDollars(bank.depositTokenName, bank.depositToken);\n  const tokenPriceInDollars = useMemo(\n    () => (stakedTokenPriceInDollars ? stakedTokenPriceInDollars : null),\n    [stakedTokenPriceInDollars],\n  );\n  const earnedInDollars = (\n    Number(tokenPriceInDollars) * Number(getDisplayBalance(stakedBalance, bank.depositToken.decimal))\n  ).toFixed(2);\n  const {onStake} = useStake(bank);\n  const {onZap} = useZap(bank);\n  const {onWithdraw} = useWithdraw(bank);\n\n  const [onPresentDeposit, onDismissDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onStake(amount);\n        onDismissDeposit();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  const [onPresentZap, onDissmissZap] = useModal(\n    <ZapModal\n      decimals={bank.depositToken.decimal}\n      onConfirm={(zappingToken, tokenName, amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onZap(zappingToken, tokenName, amount);\n        onDissmissZap();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  const [onPresentWithdraw, onDismissWithdraw] = useModal(\n    <WithdrawModal\n      max={stakedBalance}\n      decimals={bank.depositToken.decimal}\n      onConfirm={(amount) => {\n        if (Number(amount) <= 0 || isNaN(Number(amount))) return;\n        onWithdraw(amount);\n        onDismissWithdraw();\n      }}\n      tokenName={bank.depositTokenName}\n    />,\n  );\n\n  return (\n    <>\n      <Value value={getDisplayBalance(stakedBalance, bank.depositToken.decimal)} />\n      <Typography style={{textTransform: 'uppercase', color: '#fffff'}}>{`â‰ˆ $${earnedInDollars}`}\n    </Typography>\n      <Typography style={{textTransform: 'uppercase', color: '#f9d749'}}>\n      {`${bank.depositTokenName} Staked`}\n            </Typography>\n    </>\n  );\n};\n\nconst StyledCardHeader = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCardActions = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 28px;\n  width: 100%;\n`;\n\nconst StyledActionSpacer = styled.div`\n  height: ${(props) => props.theme.spacing[4]}px;\n  width: ${(props) => props.theme.spacing[4]}px;\n`;\n\nconst StyledCardContentInner = styled.div`\n  align-items: center;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport default Stake;\n"]},"metadata":{},"sourceType":"module"}